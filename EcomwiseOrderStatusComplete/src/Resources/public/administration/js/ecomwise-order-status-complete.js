(this.webpackJsonp=this.webpackJsonp||[]).push([["ecomwise-order-status-complete"],{Ifee:function(e,n){e.exports='{% block sw_order_list_bulk_selected_actions_content %}\n    <template #bulk>\n        <a\n            v-if="feature.isActive(\'FEATURE_NEXT_6061\') && acl.can(\'order.editor\')"\n            class="link link-primary"\n            @click="showBulkEditModal = true"\n        >\n            {{ $tc(\'global.sw-bulk-edit-modal.bulkEdit\') }}\n        </a>\n\n        <a\n            class="link link-danger"\n            @click="showBulkDoneModal = true"\n        >\n            {{ $tc(\'orderStatusComplete.entity-components.mainLabel\') }}\n        </a>\n\n        <sw-modal\n            v-if="showBulkDoneModal"\n            variant="small"\n            :title="$tc(\'global.default.warning\')"\n            @modal-close="showBulkDoneModal = false"\n        >\n            <p class="sw-data-grid__confirm-bulk-delete-text">\n                {{ $tc(\'orderStatusComplete.entity-components.doneMessage\', selectionCount, { count: selectionCount }) }}\n            </p>\n\n            <template #modal-footer>\n                <slot name="bulk-modal-cancel">\n                    <sw-button\n                        size="small"\n                        @click="showBulkDoneModal = false"\n                    >\n                        {{ $tc(\'global.default.cancel\') }}\n                    </sw-button>\n                </slot>\n\n                <slot name="bulk-modal-done-orders">\n                    <sw-button\n                        variant="danger"\n                        size="small"\n                        :is-loading="isBulkLoading"\n                        @click="doneOrders"\n                    >\n                        {{ $tc(\'orderStatusComplete.entity-components.mainLabel\') }}\n                    </sw-button>\n                </slot>\n            </template>\n        </sw-modal>\n    </template>\n{% endblock %}'},NGYa:function(e){e.exports=JSON.parse('{"orderStatusComplete":{"entity-components":{"doneMessage":"Weet u zeker dat u de bestellingen wilt markeren als afgerond? | Weet u zeker dat u {count} bestellingen wilt markeren als afgerond?","mainLabel":"Markeer als afgerond","infoMessage":"Bulk actie afgerond","errorMessage":"Bestelling kan niet gevonden worden"}}}')},fA8F:function(e){e.exports=JSON.parse('{"orderStatusComplete":{"entity-components":{"doneMessage":"Are you sure you want to change this order to done? | Are you sure you want to change these {count} orders to done?","mainLabel":"Mark as done","infoMessage":"Mass action completed","errorMessage":"Unable to get order"}}}')},stTG:function(e){e.exports=JSON.parse('{"orderStatusComplete":{"entity-components":{"doneMessage":"Möchten Sie diese Bestellung wirklich in erledigt ändern? | Möchten Sie diese {count} Bestellungen wirklich in erledigt ändern?","mainLabel":"als erledigt markieren","infoMessage":"Massenaktion abgeschlossen","errorMessage":"Bestellung nicht möglich"}}}')},uLJB:function(e,n,t){"use strict";t.r(n);var o=t("Ifee"),s=t.n(o),a=t("stTG"),l=t("fA8F"),i=t("NGYa"),r=Shopware,c=r.Component,d=r.Mixin;c.override("sw-order-list",{template:s.a,snippets:{"de-DE":a,"en-GB":l,"nl-NL":i},data:function(){return{syncService:null,httpClient:null,showBulkDoneModal:!1,isBulkLoading:!1}},mixins:[d.getByName("notification")],methods:{doneOrders:function(){var e=this;this.isBulkLoading=!0;var n=Object.values(this.selection).map((function(e){return e.id}));this.syncService=Shopware.Service("syncService"),this.httpClient=this.syncService.httpClient;var t=this.syncService.getBasicHeaders();return this.httpClient.post("/ecomwise/mark-done-api-action",n,{headers:t}).then((function(n){e.createNotificationInfo({title:e.$tc(n.data.type),message:e.$tc(n.data.message)}),e.isBulkLoading=!1,e.showBulkDoneModal=!1,e.getList()}))}}})}},[["uLJB","runtime"]]]);